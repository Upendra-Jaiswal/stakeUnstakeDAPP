{"ast":null,"code":"var _jsxFileName = \"/Users/upendra/Desktop/Developer/blockchain/practice/spearmintTask/stake7/stake7code/Staking/src/AppTask.js\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport { Component } from \"react\";\nimport Staking from \"./contracts/build/Staking.json\";\nimport StakingTask from \"./contracts/build/StakingTask.json\"; //import BigNumber from 'bignumber.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadWallet = async () => {\n      // A Web3Provider wraps a standard Web3 provider, which is\n      // what MetaMask injects as window.ethereum into each page\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // // MetaMask requires requesting permission to connect users accounts\n\n      await provider.send(\"eth_requestAccounts\", []);\n      const accounts = await provider.listAccounts();\n      const account = accounts[0];\n      const balance = await provider.getBalance(account);\n      const balanceInEth = ethers.utils.formatEther(balance);\n      this.setState({\n        provider: provider,\n        account: account,\n        myBalance: balanceInEth\n      });\n    };\n\n    this.setContract = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum); //const networkId = await ethers.net.getId();\n\n      const {\n        chainId\n      } = await provider.getNetwork();\n      const networkData = Staking.networks[5777];\n\n      if (networkData) {\n        const abi = StakingTask.abi;\n        const contractAddress = \"0x571f830C36EAFAe5d11654211636291fa0e460A9\";\n        console.log(\"abiTask\", abi);\n        const signer = provider.getSigner();\n        const contract = await new ethers.Contract(contractAddress, abi, signer); //const gasLimit = new BigNumber(\"300000\");\n        // const result = await contract.deposit({gasLimit: new BigNumber(\"300000\")});\n\n        this.setState({\n          contract: contract\n        });\n      }\n    };\n\n    this.getStakedBalance = async () => {\n      const contract = this.state.contract;\n      const stakedBalance = await contract.totalStakedToken();\n      const balanceInEth = ethers.utils.formatEther(stakedBalance); // const remainingBlocks = contract.bonusEndBlock - contract.startBlock;\n      // const remainingTimeInSeconds = remainingBlocks * 15; // Assuming `blockTime` is the time in seconds between blocks\n\n      const remainingBlocks = contract.bonusEndBlock();\n      const remainingTimeInSeconds = remainingBlocks * 15; // Assuming `blockTime` is the time in seconds between blocks\n      // const bonusEndBlockt = await contract.bonusEndBlock().call();\n\n      const times = 6;\n      this.setState({\n        stakedBalance: balanceInEth // timer: remainingTimeInSeconds,\n\n      });\n    };\n\n    this.stake = async () => {\n      const contract = this.state.contract;\n      await contract.deposit(this.state.stakeAmount, {\n        gasLimit: 750000\n      }); // await contract.deposit(this.state.stakeAmount).send({ from: this.state.account });\n    };\n\n    this.withdraw = async () => {\n      const contract = this.state.contract;\n      await contract.withdraw(this.state.withdrawAmount);\n    };\n\n    this.myStakedAmount = async () => {\n      const contract = this.state.contract;\n      const amount = await contract.stakedToken({\n        from: this.state.account\n      });\n      const poollimit = await contract.poolLimitPerUser();\n      const balancepool = ethers.utils.formatEther(poollimit);\n      const balanceInEth = ethers.utils.formatEther(amount);\n      this.setState({\n        myStakedAmount: balanceInEth\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        stakeAmount: event.target.value\n      });\n    };\n\n    this.state = {\n      provider: null,\n      account: null,\n      contract: null,\n      myBalance: 0,\n      stakedBalance: 0,\n      timer: 0,\n      stakeAmount: 0,\n      myStakedAmount: 0,\n      withdrawAmount: 0\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWallet();\n    await this.setContract();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [\"Hello \", this.state.account, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Balance:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), \" \", this.state.myBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"My Staked Amout:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), \" \", this.state.myStakedAmount, \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Timer:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 63\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.myStakedAmount,\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Total Staked Amount: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), \" \", this.state.stakedBalance, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.getStakedBalance,\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"amount\",\n            name: \"amount\",\n            onChange: this.handleChange,\n            value: this.state.stakeAmount,\n            autoComplete: \"off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.stake,\n            children: \"Stake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"amountWithdraw\",\n          name: \"amountWithdraw\",\n          onChange: this.handleChange,\n          value: this.state.withdrawAmount,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.withdraw,\n          children: \"Withdraw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["ethers","Component","Staking","StakingTask","App","constructor","props","loadWallet","provider","providers","Web3Provider","window","ethereum","send","accounts","listAccounts","account","balance","getBalance","balanceInEth","utils","formatEther","setState","myBalance","setContract","chainId","getNetwork","networkData","networks","abi","contractAddress","console","log","signer","getSigner","contract","Contract","getStakedBalance","state","stakedBalance","totalStakedToken","remainingBlocks","bonusEndBlock","remainingTimeInSeconds","times","stake","deposit","stakeAmount","gasLimit","withdraw","withdrawAmount","myStakedAmount","amount","stakedToken","from","poollimit","poolLimitPerUser","balancepool","handleChange","event","target","value","timer","componentDidMount","render"],"sources":["/Users/upendra/Desktop/Developer/blockchain/practice/spearmintTask/stake7/stake7code/Staking/src/AppTask.js"],"sourcesContent":["import \"./App.css\";\nimport { ethers } from \"ethers\";\nimport { Component } from \"react\";\nimport Staking from \"./contracts/build/Staking.json\";\nimport StakingTask from \"./contracts/build/StakingTask.json\";\n//import BigNumber from 'bignumber.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      provider: null,\n      account: null,\n      contract: null,\n      myBalance: 0,\n      stakedBalance: 0,\n      timer: 0,\n      stakeAmount: 0,\n      myStakedAmount: 0,\n      withdrawAmount: 0,\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWallet();\n    await this.setContract();\n  }\n\n  loadWallet = async () => {\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what MetaMask injects as window.ethereum into each page\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // // MetaMask requires requesting permission to connect users accounts\n    await provider.send(\"eth_requestAccounts\", []);\n    const accounts = await provider.listAccounts();\n    const account = accounts[0];\n    const balance = await provider.getBalance(account);\n    const balanceInEth = ethers.utils.formatEther(balance);\n\n    this.setState({\n      provider: provider,\n      account: account,\n      myBalance: balanceInEth,\n    });\n  };\n\n  setContract = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    //const networkId = await ethers.net.getId();\n    const { chainId } = await provider.getNetwork();\n\n    const networkData = Staking.networks[5777];\n\n    if (networkData) {\n      const abi = StakingTask.abi;\n      const contractAddress = \"0x571f830C36EAFAe5d11654211636291fa0e460A9\";\n      console.log(\"abiTask\", abi);\n      const signer = provider.getSigner();\n      const contract = await new ethers.Contract(contractAddress, abi, signer);\n\n      //const gasLimit = new BigNumber(\"300000\");\n      // const result = await contract.deposit({gasLimit: new BigNumber(\"300000\")});\n      this.setState({ contract: contract });\n    }\n  };\n\n  getStakedBalance = async () => {\n    const contract = this.state.contract;\n    const stakedBalance = await contract.totalStakedToken();\n    const balanceInEth = ethers.utils.formatEther(stakedBalance);\n\n\n    // const remainingBlocks = contract.bonusEndBlock - contract.startBlock;\n    // const remainingTimeInSeconds = remainingBlocks * 15; // Assuming `blockTime` is the time in seconds between blocks\n\n\n    const remainingBlocks = contract.bonusEndBlock();\n    const remainingTimeInSeconds = remainingBlocks * 15; // Assuming `blockTime` is the time in seconds between blocks\n\n   // const bonusEndBlockt = await contract.bonusEndBlock().call();\n\n    const times = 6;\n    this.setState({\n      stakedBalance: balanceInEth,\n      // timer: remainingTimeInSeconds,\n    });\n  };\n\n  // stake = async () => {\n  //   const contract = this.state.contract;\n  //   await contract.deposit(this.state.stakeAmount, {\n  //     from: this.state.account,\n  //     value: ethers.utils.parseEther(this.state.stakeAmount),\n  //   });\n  // };\n\n  // stake = async () => {\n  //   const contract = this.state.contract;\n  //   await contract.deposit(this.state.stakeAmount, { gasLimit: 750000 });\n  //   // await contract.deposit(this.state.stakeAmount).send({ from: this.state.account });\n  // };\n\n  stake = async () => {\n    const contract = this.state.contract;\n    await contract.deposit(this.state.stakeAmount, { gasLimit: 750000 });\n    // await contract.deposit(this.state.stakeAmount).send({ from: this.state.account });\n  };\n\n  // from: this.state.account,\n  // gasPrice: { gasLimit: 750000 }\n\n  // withdraw = async () => {\n  //   const contract = this.state.contract;\n  //   await contract.withdraw({ from: this.state.account });\n  // };\n\n  withdraw = async () => {\n    const contract = this.state.contract;\n    await contract.withdraw(this.state.withdrawAmount);\n  };\n\n  myStakedAmount = async () => {\n    const contract = this.state.contract;\n    const amount = await contract.stakedToken({ from: this.state.account });\n    const poollimit = await contract.poolLimitPerUser();\n    const balancepool = ethers.utils.formatEther(poollimit);\n    const balanceInEth = ethers.utils.formatEther(amount);\n    this.setState({ myStakedAmount: balanceInEth });\n  };\n\n  handleChange = (event) => {\n    this.setState({ stakeAmount: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        Hello {this.state.account}\n        <div>\n          <b>Balance:</b> {this.state.myBalance}\n        </div>\n        <div>\n          <b>My Staked Amout:</b> {this.state.myStakedAmount} <b>Timer:</b>{\" \"}\n          {/* {this.timer} <br /> */}\n          <button onClick={this.myStakedAmount}>Refresh</button>\n        </div>\n        <div>\n          <b>Total Staked Amount: </b> {this.state.stakedBalance}{\" \"}\n          <button onClick={this.getStakedBalance}>Refresh</button>\n        </div>\n        <div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"amount\"\n              name=\"amount\"\n              onChange={this.handleChange}\n              value={this.state.stakeAmount}\n              autoComplete=\"off\"\n            ></input>\n            <button onClick={this.stake}>Stake</button>\n          </div>\n          <input\n            type=\"text\"\n            id=\"amountWithdraw\"\n            name=\"amountWithdraw\"\n            onChange={this.handleChange}\n            value={this.state.withdrawAmount}\n            autoComplete=\"off\"\n          ></input>\n          <button onClick={this.withdraw}>Withdraw</button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}