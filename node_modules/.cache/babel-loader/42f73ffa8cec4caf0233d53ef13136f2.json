{"ast":null,"code":"var _jsxFileName = \"/Users/upendra/Desktop/Developer/blockchain/practice/spearmintTask/stake7/stake7code/Staking/src/AppTask.js\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport { Component } from \"react\";\nimport Staking from \"./contracts/build/Staking.json\";\nimport StakingTask from \"./contracts/build/StakingTask.json\"; //import BigNumber from 'bignumber.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadWallet = async () => {\n      // A Web3Provider wraps a standard Web3 provider, which is\n      // what MetaMask injects as window.ethereum into each page\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // // MetaMask requires requesting permission to connect users accounts\n\n      await provider.send(\"eth_requestAccounts\", []);\n      const accounts = await provider.listAccounts();\n      const account = accounts[0];\n      const balance = await provider.getBalance(account);\n      const balanceInEth = ethers.utils.formatEther(balance);\n      this.setState({\n        provider: provider,\n        account: account,\n        myBalance: balanceInEth\n      });\n    };\n\n    this.setContract = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum); //const networkId = await ethers.net.getId();\n\n      const {\n        chainId\n      } = await provider.getNetwork();\n      const networkData = Staking.networks[5777];\n\n      if (networkData) {\n        const abi = StakingTask.abi;\n        const contractAddress = \"0x571f830C36EAFAe5d11654211636291fa0e460A9\";\n        console.log(\"abiTask\", abi);\n        const signer = provider.getSigner();\n        const contract = await new ethers.Contract(contractAddress, abi, signer);\n        const remainingBlocks = contract.bonusEndBlock - contract.block.number;\n        const remainingTimeInSeconds = remainingBlocks * 15; // Assuming `blockTime` is the time in seconds between blocks\n        //const gasLimit = new BigNumber(\"300000\");\n        // const result = await contract.deposit({gasLimit: new BigNumber(\"300000\")});\n\n        this.setState({\n          contract: contract\n        });\n      }\n    };\n\n    this.getStakedBalance = async () => {\n      const contract = this.state.contract;\n      const stakedBalance = await contract.totalStakedToken();\n      const balanceInEth = ethers.utils.formatEther(stakedBalance);\n      this.setState({\n        stakedBalance: balanceInEth\n      });\n    };\n\n    this.stake = async () => {\n      const contract = this.state.contract;\n      await contract.deposit(this.state.stakeAmount, {\n        gasLimit: 750000\n      }); // await contract.deposit(this.state.stakeAmount).send({ from: this.state.account });\n    };\n\n    this.withdraw = async () => {\n      const contract = this.state.contract;\n      await contract.withdraw(this.state.withdrawAmount);\n    };\n\n    this.myStakedAmount = async () => {\n      const contract = this.state.contract;\n      const amount = await contract.stakedToken({\n        from: this.state.account\n      });\n      const poollimit = await contract.poolLimitPerUser();\n      const balancepool = ethers.utils.formatEther(poollimit);\n      const balanceInEth = ethers.utils.formatEther(amount);\n      this.setState({\n        myStakedAmount: balanceInEth\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        stakeAmount: event.target.value\n      });\n    };\n\n    this.state = {\n      provider: null,\n      account: null,\n      contract: null,\n      myBalance: 0,\n      stakedBalance: 0,\n      stakeAmount: 0,\n      myStakedAmount: 0,\n      withdrawAmount: 0\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWallet();\n    await this.setContract();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [\"Hello \", this.state.account, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Balance:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), \" \", this.state.myBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"My Staked Amout:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), \" \", this.state.myStakedAmount, \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Timer:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), \" \", remainingTimeInSeconds, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.myStakedAmount,\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Total Staked Amount: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), \" \", this.state.stakedBalance, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.getStakedBalance,\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"amount\",\n            name: \"amount\",\n            onChange: this.handleChange,\n            value: this.state.stakeAmount,\n            autoComplete: \"off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.stake,\n            children: \"Stake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"amountWithdraw\",\n          name: \"amountWithdraw\",\n          onChange: this.handleChange,\n          value: this.state.withdrawAmount,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.withdraw,\n          children: \"Withdraw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["ethers","Component","Staking","StakingTask","App","constructor","props","loadWallet","provider","providers","Web3Provider","window","ethereum","send","accounts","listAccounts","account","balance","getBalance","balanceInEth","utils","formatEther","setState","myBalance","setContract","chainId","getNetwork","networkData","networks","abi","contractAddress","console","log","signer","getSigner","contract","Contract","remainingBlocks","bonusEndBlock","block","number","remainingTimeInSeconds","getStakedBalance","state","stakedBalance","totalStakedToken","stake","deposit","stakeAmount","gasLimit","withdraw","withdrawAmount","myStakedAmount","amount","stakedToken","from","poollimit","poolLimitPerUser","balancepool","handleChange","event","target","value","componentDidMount","render"],"sources":["/Users/upendra/Desktop/Developer/blockchain/practice/spearmintTask/stake7/stake7code/Staking/src/AppTask.js"],"sourcesContent":["import \"./App.css\";\nimport { ethers } from \"ethers\";\nimport { Component } from \"react\";\nimport Staking from \"./contracts/build/Staking.json\";\nimport StakingTask from \"./contracts/build/StakingTask.json\";\n//import BigNumber from 'bignumber.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      provider: null,\n      account: null,\n      contract: null,\n      myBalance: 0,\n      stakedBalance: 0,\n      stakeAmount: 0,\n      myStakedAmount: 0,\n      withdrawAmount: 0,\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWallet();\n    await this.setContract();\n  }\n\n  loadWallet = async () => {\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what MetaMask injects as window.ethereum into each page\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // // MetaMask requires requesting permission to connect users accounts\n    await provider.send(\"eth_requestAccounts\", []);\n    const accounts = await provider.listAccounts();\n    const account = accounts[0];\n    const balance = await provider.getBalance(account);\n    const balanceInEth = ethers.utils.formatEther(balance);\n\n    this.setState({\n      provider: provider,\n      account: account,\n      myBalance: balanceInEth,\n    });\n  };\n\n  setContract = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    //const networkId = await ethers.net.getId();\n    const { chainId } = await provider.getNetwork();\n\n    const networkData = Staking.networks[5777];\n\n    if (networkData) {\n      const abi = StakingTask.abi;\n      const contractAddress = \"0x571f830C36EAFAe5d11654211636291fa0e460A9\";\n      console.log(\"abiTask\", abi);\n      const signer = provider.getSigner();\n      const contract = await new ethers.Contract(contractAddress, abi, signer);\n\n\n    \n            const remainingBlocks = contract.bonusEndBlock - contract.block.number;\n            const remainingTimeInSeconds = remainingBlocks * 15;  // Assuming `blockTime` is the time in seconds between blocks\n           \n    \n\n\n\n      //const gasLimit = new BigNumber(\"300000\");\n      // const result = await contract.deposit({gasLimit: new BigNumber(\"300000\")});\n      this.setState({ contract: contract });\n    }\n  };\n\n  getStakedBalance = async () => {\n    const contract = this.state.contract;\n    const stakedBalance = await contract.totalStakedToken();\n    const balanceInEth = ethers.utils.formatEther(stakedBalance);\n\n    this.setState({ stakedBalance: balanceInEth });\n  };\n\n  // stake = async () => {\n  //   const contract = this.state.contract;\n  //   await contract.deposit(this.state.stakeAmount, {\n  //     from: this.state.account,\n  //     value: ethers.utils.parseEther(this.state.stakeAmount),\n  //   });\n  // };\n\n  // stake = async () => {\n  //   const contract = this.state.contract;\n  //   await contract.deposit(this.state.stakeAmount, { gasLimit: 750000 });\n  //   // await contract.deposit(this.state.stakeAmount).send({ from: this.state.account });\n  // };\n\n\n\n    stake = async () => {\n    const contract = this.state.contract;\n    await contract.deposit(this.state.stakeAmount, { gasLimit: 750000 });\n    // await contract.deposit(this.state.stakeAmount).send({ from: this.state.account });\n  };\n\n\n// from: this.state.account,\n// gasPrice: { gasLimit: 750000 }\n\n  // withdraw = async () => {\n  //   const contract = this.state.contract;\n  //   await contract.withdraw({ from: this.state.account });\n  // };\n\n  withdraw = async () => {\n    const contract = this.state.contract;\n    await contract.withdraw(this.state.withdrawAmount);\n  };\n\n  myStakedAmount = async () => {\n    const contract = this.state.contract;\n    const amount = await contract.stakedToken({ from: this.state.account });\n    const poollimit = await contract.poolLimitPerUser();\n    const balancepool = ethers.utils.formatEther(poollimit);\n    const balanceInEth = ethers.utils.formatEther(amount);\n    this.setState({ myStakedAmount: balanceInEth });\n  };\n\n  handleChange = (event) => {\n    this.setState({ stakeAmount: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        Hello {this.state.account}\n        <div>\n          <b>Balance:</b> {this.state.myBalance}\n        </div>\n        <div>\n          <b>My Staked Amout:</b> {this.state.myStakedAmount}{\" \"}\n          <b>Timer:</b> {remainingTimeInSeconds}{\" \"}\n          <button onClick={this.myStakedAmount}>Refresh</button>\n        </div>\n        <div>\n          <b>Total Staked Amount: </b> {this.state.stakedBalance}{\" \"}\n          <button onClick={this.getStakedBalance}>Refresh</button>\n        </div>\n        <div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"amount\"\n              name=\"amount\"\n              onChange={this.handleChange}\n              value={this.state.stakeAmount}\n              autoComplete=\"off\"\n            ></input>\n            <button onClick={this.stake}>Stake</button>\n          </div>\n          <input\n            type=\"text\"\n            id=\"amountWithdraw\"\n            name=\"amountWithdraw\"\n            onChange={this.handleChange}\n            value={this.state.withdrawAmount}\n            autoComplete=\"off\"\n          ></input>\n          <button onClick={this.withdraw}>Withdraw</button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,WAAP,MAAwB,oCAAxB,C,CACA;;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;EAC1BI,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAmBnBC,UAnBmB,GAmBN,YAAY;MACvB;MACA;MACA,MAAMC,QAAQ,GAAG,IAAIR,MAAM,CAACS,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB,CAHuB,CAIvB;;MACA,MAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;MACA,MAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,YAAT,EAAvB;MACA,MAAMC,OAAO,GAAGF,QAAQ,CAAC,CAAD,CAAxB;MACA,MAAMG,OAAO,GAAG,MAAMT,QAAQ,CAACU,UAAT,CAAoBF,OAApB,CAAtB;MACA,MAAMG,YAAY,GAAGnB,MAAM,CAACoB,KAAP,CAAaC,WAAb,CAAyBJ,OAAzB,CAArB;MAEA,KAAKK,QAAL,CAAc;QACZd,QAAQ,EAAEA,QADE;QAEZQ,OAAO,EAAEA,OAFG;QAGZO,SAAS,EAAEJ;MAHC,CAAd;IAKD,CAnCkB;;IAAA,KAqCnBK,WArCmB,GAqCL,YAAY;MACxB,MAAMhB,QAAQ,GAAG,IAAIR,MAAM,CAACS,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB,CADwB,CAGxB;;MACA,MAAM;QAAEa;MAAF,IAAc,MAAMjB,QAAQ,CAACkB,UAAT,EAA1B;MAEA,MAAMC,WAAW,GAAGzB,OAAO,CAAC0B,QAAR,CAAiB,IAAjB,CAApB;;MAEA,IAAID,WAAJ,EAAiB;QACf,MAAME,GAAG,GAAG1B,WAAW,CAAC0B,GAAxB;QACA,MAAMC,eAAe,GAAG,4CAAxB;QACAC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,GAAvB;QACA,MAAMI,MAAM,GAAGzB,QAAQ,CAAC0B,SAAT,EAAf;QACA,MAAMC,QAAQ,GAAG,MAAM,IAAInC,MAAM,CAACoC,QAAX,CAAoBN,eAApB,EAAqCD,GAArC,EAA0CI,MAA1C,CAAvB;QAIM,MAAMI,eAAe,GAAGF,QAAQ,CAACG,aAAT,GAAyBH,QAAQ,CAACI,KAAT,CAAeC,MAAhE;QACA,MAAMC,sBAAsB,GAAGJ,eAAe,GAAG,EAAjD,CAVS,CAU6C;QAM5D;QACA;;QACA,KAAKf,QAAL,CAAc;UAAEa,QAAQ,EAAEA;QAAZ,CAAd;MACD;IACF,CAjEkB;;IAAA,KAmEnBO,gBAnEmB,GAmEA,YAAY;MAC7B,MAAMP,QAAQ,GAAG,KAAKQ,KAAL,CAAWR,QAA5B;MACA,MAAMS,aAAa,GAAG,MAAMT,QAAQ,CAACU,gBAAT,EAA5B;MACA,MAAM1B,YAAY,GAAGnB,MAAM,CAACoB,KAAP,CAAaC,WAAb,CAAyBuB,aAAzB,CAArB;MAEA,KAAKtB,QAAL,CAAc;QAAEsB,aAAa,EAAEzB;MAAjB,CAAd;IACD,CAzEkB;;IAAA,KA2FjB2B,KA3FiB,GA2FT,YAAY;MACpB,MAAMX,QAAQ,GAAG,KAAKQ,KAAL,CAAWR,QAA5B;MACA,MAAMA,QAAQ,CAACY,OAAT,CAAiB,KAAKJ,KAAL,CAAWK,WAA5B,EAAyC;QAAEC,QAAQ,EAAE;MAAZ,CAAzC,CAAN,CAFoB,CAGpB;IACD,CA/FkB;;IAAA,KA0GnBC,QA1GmB,GA0GR,YAAY;MACrB,MAAMf,QAAQ,GAAG,KAAKQ,KAAL,CAAWR,QAA5B;MACA,MAAMA,QAAQ,CAACe,QAAT,CAAkB,KAAKP,KAAL,CAAWQ,cAA7B,CAAN;IACD,CA7GkB;;IAAA,KA+GnBC,cA/GmB,GA+GF,YAAY;MAC3B,MAAMjB,QAAQ,GAAG,KAAKQ,KAAL,CAAWR,QAA5B;MACA,MAAMkB,MAAM,GAAG,MAAMlB,QAAQ,CAACmB,WAAT,CAAqB;QAAEC,IAAI,EAAE,KAAKZ,KAAL,CAAW3B;MAAnB,CAArB,CAArB;MACA,MAAMwC,SAAS,GAAG,MAAMrB,QAAQ,CAACsB,gBAAT,EAAxB;MACA,MAAMC,WAAW,GAAG1D,MAAM,CAACoB,KAAP,CAAaC,WAAb,CAAyBmC,SAAzB,CAApB;MACA,MAAMrC,YAAY,GAAGnB,MAAM,CAACoB,KAAP,CAAaC,WAAb,CAAyBgC,MAAzB,CAArB;MACA,KAAK/B,QAAL,CAAc;QAAE8B,cAAc,EAAEjC;MAAlB,CAAd;IACD,CAtHkB;;IAAA,KAwHnBwC,YAxHmB,GAwHHC,KAAD,IAAW;MACxB,KAAKtC,QAAL,CAAc;QAAE0B,WAAW,EAAEY,KAAK,CAACC,MAAN,CAAaC;MAA5B,CAAd;IACD,CA1HkB;;IAEjB,KAAKnB,KAAL,GAAa;MACXnC,QAAQ,EAAE,IADC;MAEXQ,OAAO,EAAE,IAFE;MAGXmB,QAAQ,EAAE,IAHC;MAIXZ,SAAS,EAAE,CAJA;MAKXqB,aAAa,EAAE,CALJ;MAMXI,WAAW,EAAE,CANF;MAOXI,cAAc,EAAE,CAPL;MAQXD,cAAc,EAAE;IARL,CAAb;EAUD;;EAEsB,MAAjBY,iBAAiB,GAAG;IACxB,MAAM,KAAKxD,UAAL,EAAN;IACA,MAAM,KAAKiB,WAAL,EAAN;EACD;;EA2GDwC,MAAM,GAAG;IACP,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,qBACS,KAAKrB,KAAL,CAAW3B,OADpB,eAEE;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,OACmB,KAAK2B,KAAL,CAAWpB,SAD9B;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAKE;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,OAC2B,KAAKoB,KAAL,CAAWS,cADtC,EACsD,GADtD,eAEE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,OAEiBX,sBAFjB,EAEyC,GAFzC,eAGE;UAAQ,OAAO,EAAE,KAAKW,cAAtB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA;QAAA;QAAA;QAAA;MAAA,QALF,eAUE;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,OACgC,KAAKT,KAAL,CAAWC,aAD3C,EAC0D,GAD1D,eAEE;UAAQ,OAAO,EAAE,KAAKF,gBAAtB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAVF,eAcE;QAAA,wBACE;UAAA,wBACE;YACE,IAAI,EAAC,MADP;YAEE,EAAE,EAAC,QAFL;YAGE,IAAI,EAAC,QAHP;YAIE,QAAQ,EAAE,KAAKiB,YAJjB;YAKE,KAAK,EAAE,KAAKhB,KAAL,CAAWK,WALpB;YAME,YAAY,EAAC;UANf;YAAA;YAAA;YAAA;UAAA,QADF,eASE;YAAQ,OAAO,EAAE,KAAKF,KAAtB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QATF;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAYE;UACE,IAAI,EAAC,MADP;UAEE,EAAE,EAAC,gBAFL;UAGE,IAAI,EAAC,gBAHP;UAIE,QAAQ,EAAE,KAAKa,YAJjB;UAKE,KAAK,EAAE,KAAKhB,KAAL,CAAWQ,cALpB;UAME,YAAY,EAAC;QANf;UAAA;UAAA;UAAA;QAAA,QAZF,eAoBE;UAAQ,OAAO,EAAE,KAAKD,QAAtB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QApBF;MAAA;QAAA;QAAA;QAAA;MAAA,QAdF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAuCD;;AArKyB;;AAuK5B,eAAe9C,GAAf"},"metadata":{},"sourceType":"module"}